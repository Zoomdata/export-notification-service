buildscript {
    ext {
        logbackVersion = '1.1.5'
        slf4jVersion = '1.7.16'
        springBootVersion = '1.3.5.RELEASE'
        springFrameworkVersion = '4.2.5.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.netflix.nebula:gradle-ospackage-plugin:3.6.1")
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/libs-milestone" }
    maven { url "http://maven.zoomdata.com/artifactory/libs-release-local" }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'nebula.ospackage-base'

jar {
    baseName = 'export-notification-service'
    version =  '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // Spring Boot
    compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}") {
        exclude group: 'org.eclipse.jetty.websocket'
    }

    // Spring Framework
    compile("org.springframework:spring-web:${springFrameworkVersion}")
    compile("org.springframework:spring-webmvc:${springFrameworkVersion}")

    compileOnly('org.projectlombok:lombok:1.16.8')
}

task buildRpm(type: Rpm, dependsOn: build) {

    ext {
        installdir = "/opt/${jar.baseName}"
        systemuser = 'expsrv_user'
        service_name = "${jar.baseName}"
    }

    packageName = jar.baseName
    version = jar.version
    arch = X86_64
    os = LINUX
    type = BINARY
    provides "Zoomdata ${jar.baseName}"
    packager 'Zoomdata'
    prefix '= /opt'

    preInstall file('src/main/rpm/scripts-hardcoded/preinstall.sh')
    postInstall file('src/main/rpm/scripts-hardcoded/postinstall.sh')
    preUninstall file('src/main/rpm/scripts-hardcoded/preremove.sh')
    postUninstall file('src/main/rpm/scripts-hardcoded/postremove.sh')

    from(jar.outputs.files) {
        createDirectoryEntry = true
        into "${installdir}/services"
        user "${systemuser}"
        rename { fileName ->
            fileName.replace("-${jar.version}", '')
        }
    }

    from('src/main/rpm/skeleton') {
        createDirectoryEntry = true
        into "${installdir}"
        user "${systemuser}"
    }
}
